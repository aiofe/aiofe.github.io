<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AIOFE</title>
    <description></description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 23 Jan 2020 15:07:23 +0800</pubDate>
    <lastBuildDate>Thu, 23 Jan 2020 15:07:23 +0800</lastBuildDate>
    <generator>Jekyll v4.0.0</generator>
    
      <item>
        <title>TS下基于Vue Composition API的表单组件化实践</title>
        <description>&lt;h1 id=&quot;vue-composition-api&quot;&gt;Vue Composition API&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://vue-composition-api-rfc.netlify.com/&quot;&gt;Vue Composition API RFC&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这名字太长了，一下都以3.0API或者hook代称。&lt;/p&gt;

&lt;p&gt;3.0在API层面发生了非常大的变动，大部分对开发是友好的，也有一些看起来比较扯淡的地方，后面专门写一篇文章来唠。&lt;/p&gt;

&lt;p&gt;在这里列举一些我认为比较核心的变动要点，看完应该就能有一个宏观的认识。&lt;/p&gt;
&lt;h2 id=&quot;废弃options-api&quot;&gt;废弃Options API&lt;/h2&gt;
&lt;p&gt;3.0API中不会有，&lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;methods&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;computed&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;mounted&lt;/code&gt;等等字段了，具体的变化参考RFC我就不细说了。取而代之的是一个setup函数。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;setup&lt;/code&gt;这个名字在社区被喷过，但是想想其实是比较准确的描述。&lt;/p&gt;

&lt;p&gt;这个函数有两种用法：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;返回一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Object&lt;/code&gt;，值可以在模板中被访问&lt;/li&gt;
  &lt;li&gt;返回一个函数，其返回值是一个render function/JS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个函数就是用来挂载数据的，所以可以理解为create过程，因此取代了&lt;code class=&quot;highlighter-rouge&quot;&gt;beforeCreate&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;created&lt;/code&gt;钩子。&lt;/p&gt;

&lt;h2 id=&quot;独立的响应式系统&quot;&gt;独立的响应式系统&lt;/h2&gt;
&lt;p&gt;2.0的响应式是和Vue实例强绑定的，Vue实例上的数据才会有响应式特性。但3.0中，响应式作为一个独立的系统存在，并且不一定和Vue配合使用。&lt;/p&gt;

&lt;p&gt;这个设计的核心目的就是&lt;strong&gt;解耦&lt;/strong&gt;，响应式和Vue解耦之后，才可能废弃旧的API。这和React Hooks的设计目的是有重合的，&lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;setState&lt;/code&gt;方法强耦合，使得逻辑难以做到完整抽取，那就用&lt;code class=&quot;highlighter-rouge&quot;&gt;useState&lt;/code&gt;将这个耦合解除掉。&lt;/p&gt;

&lt;p&gt;响应式解耦之后，只需要将相应的逻辑分割出来，在&lt;code class=&quot;highlighter-rouge&quot;&gt;setup&lt;/code&gt;中返回所需的状态和方法就行。对3.0设计的分析和理解会单独写篇文章，从实践来看，开发灵活度得到了很大提升，但从2.0到3.0需要适应一个较大的思维变化。&lt;/p&gt;

&lt;h2 id=&quot;no-class-api&quot;&gt;No Class API&lt;/h2&gt;
&lt;p&gt;在Vue-next的代码里，一个class都没有用，啥都是函数和闭包来实现的。目的也很清楚地在Motivation中提到：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Better Type Interface&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;至于为什么放弃class based API，RFC中有详细的讨论，我就不多bb了。实际开发下来，类型推导简直不要太爽。&lt;/p&gt;
&lt;h1 id=&quot;为什么要做这件事&quot;&gt;为什么要做这件事&lt;/h1&gt;
&lt;p&gt;我们业务场景中的表单有一下特点：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;分步骤，步骤间分页&lt;/li&gt;
  &lt;li&gt;表单项联动范围广&lt;/li&gt;
  &lt;li&gt;表单流程随场景变化，但变化不大，比如一个页面80%相同，造成复用问题&lt;/li&gt;
  &lt;li&gt;表单项功能可能在很多场景中复用&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因此我们需要一个解决复用和表单联动问题的工程实践。这个实践尽可能利用了3.0API的特性的优势来提高开发体验和效率。&lt;/p&gt;
&lt;h1 id=&quot;一种常见思路使用全局model和context&quot;&gt;一种常见思路：使用全局model和context&lt;/h1&gt;

&lt;p&gt;目前的各种方案中，我认为比较好的是使用一个全局的model对象存储表单项数据。更细致一点的会区分model和context来更好地划分逻辑。&lt;/p&gt;

&lt;p&gt;这个方案的好处是灵活，总线机制能让你在表单项层面想怎么搞就怎么搞，不管怎么动态，数据最终由总线串联起来就行。&lt;/p&gt;

&lt;p&gt;在设计层面，model和context可以为一个表单项提供完整的上下文，在表单项的域中，无需关心外界的其他信息，可以将注意力集中在业务逻辑上。&lt;/p&gt;

&lt;p&gt;但这种方案的劣势同样是灵活。model和context的设计使得其值是在运行时决定的，如果希望开发阶段能够得到model和context的类型信息，就需要手动定义interface并使用极其丑陋的方式为model和context声明类型。&lt;/p&gt;

&lt;p&gt;由于其本身具有的运行时属性，这个问题很难从设计层面解决。&lt;/p&gt;

&lt;p&gt;所以说&lt;/p&gt;
&lt;h2 id=&quot;这种思路会面临几个问题&quot;&gt;这种思路会面临几个问题：&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;开发时失去类型推导&lt;/p&gt;

    &lt;p&gt;这个主要是爽不爽的问题&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;model和context注入方式&lt;/p&gt;

    &lt;p&gt;注入方式无非两种，&lt;strong&gt;prop传入&lt;/strong&gt;和&lt;strong&gt;全局变量读取&lt;/strong&gt;。&lt;/p&gt;

    &lt;p&gt;使用prop就会遇到多层组件透传的问题。&lt;/p&gt;

    &lt;p&gt;使用全局变量本身就是一个强耦合的操作。但是这里是否需要考虑这个因素是见仁见智的，要看你是否真的需要这个表单组件拥有那么广的可复用性，一般来说这个组件也就是在这组表单里用。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;表单项和环境的剥离是不完全的&lt;/p&gt;

    &lt;p&gt;表单项的理想抽象是一个提供一组数据的组件。至于这组数据在最终的结果中的key是什么，在表单项中应该是没有感知的。而使用model方案处理表单项关联时如果将key视为一个未知量会就会遇到问题，因为需要关联的key是未知的。这时有两个方法解决，被依赖项在值修改时写context或者使用一个表单项内部使用的固定innerKey。&lt;/p&gt;

    &lt;p&gt;第一个方法，由于context是运行时的没有类型，需要不同组件开发时协商好，维护成本就比较高。&lt;/p&gt;

    &lt;p&gt;第二个方法，实际造成了耦合，而且每个innerKey对应的值是否存在是未知的，数据类型是什么也是未知的&lt;/p&gt;

    &lt;p&gt;所以说model方案的最大问题还是解耦不全。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当然这个方案不是不好，这个方案的不足主要还是在开发上，脱离业务谈技术都是耍流氓。比如可视化拖拽生成页面一类的产品使用这个方案就很好，因为这样生成的表单中，表单项的key和表单之间的关系都是相对确定的，也不需要开发啥。&lt;/p&gt;
&lt;h1 id=&quot;核心思路&quot;&gt;核心思路&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;表单由一组表单项组成&lt;/li&gt;
  &lt;li&gt;表单项是一个相对独立的域，它的功能是提供一组数据&lt;/li&gt;
  &lt;li&gt;在Vue表单组件中调用封装的表单项组件其实就是一种配置化，配置描述语言是js和vue template&lt;/li&gt;
  &lt;li&gt;表单项不直接依赖其他表单项，多个表单项的耦合在表单层面实现
    &lt;h1 id=&quot;数据串联&quot;&gt;数据串联&lt;/h1&gt;
    &lt;p&gt;每个表单项组件提供&lt;code class=&quot;highlighter-rouge&quot;&gt;getData&lt;/code&gt;函数，该函数返回表单项暴露的数据。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;表单提供&lt;code class=&quot;highlighter-rouge&quot;&gt;getFormData&lt;/code&gt;函数，完成表单项数据的组合，指定各项数据的key，用于与后端的交互。&lt;/p&gt;

&lt;p&gt;由于&lt;code class=&quot;highlighter-rouge&quot;&gt;getData&lt;/code&gt;类型是可推导的，&lt;code class=&quot;highlighter-rouge&quot;&gt;getFormData&lt;/code&gt;类型也是可推导的。现在需要考虑的是&lt;code class=&quot;highlighter-rouge&quot;&gt;getData&lt;/code&gt;从哪里取数据的问题。&lt;/p&gt;
&lt;h1 id=&quot;组件数据存储和复用&quot;&gt;组件数据存储和复用&lt;/h1&gt;
&lt;p&gt;表单项组件的&lt;code class=&quot;highlighter-rouge&quot;&gt;getData&lt;/code&gt;不应该通过Vue实例外暴露，实际上在3.0API中我们应当尽量避免通过Vue实例暴露方法，hook的一个目的就是把方法从class中抽取取来。&lt;/p&gt;

&lt;p&gt;这样设计造成的问题是，states不能存储在Vue实例中，只能存在外部。&lt;/p&gt;

&lt;p&gt;用单例存在外部，就会出现复用的问题，不能简单地放在变量里，否则一个组件被调用多次时拿到的值是同一个引用。&lt;/p&gt;

&lt;p&gt;因此我们需要设计一个map的结构存储多个值。组件可以根据自身的key定位到表单项的states。这个map我们就叫它cache吧。&lt;/p&gt;

&lt;p&gt;我们可以设计一个函数来构造cache和getter，就像这样&lt;/p&gt;
&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getCacheByKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getChache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 参数是states&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样的好处在于，cache的构建方式是统一的，并且可以保留states完整的类型信息。&lt;/p&gt;

&lt;p&gt;然后getData就可以从顺利地拿到数据，并且获得数据的类型推导了。&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;example&lt;/h2&gt;
&lt;p&gt;最后的实现就是这样&lt;/p&gt;
&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;inputCache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;getInputStates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cacheFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;''&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getInputData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inputCache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value_&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这些变量都需要在单独的ts文件暴露，因为在shim-vue的声明文件中定义了.vue文件导出的是一个组件对象，没有其他的方法，所以写在vue文件中是不能被ts识别的。&lt;/p&gt;

&lt;p&gt;这在一定程度上违背了code orgization的初衷，而直接从vue里导出实际上是有效的，这个问题应该能通过写一个插件来解决。&lt;/p&gt;

&lt;h3 id=&quot;cachefactory&quot;&gt;cacheFactory&lt;/h3&gt;
&lt;p&gt;这里给出一个我的实现&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;注意本文只是提供一种思路，像cacheFactory的命名、实现一类的东西，并不是非要这么做，只是我觉得方便。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{[&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UnwrapRef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cacheFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UnwrapRef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cache&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getStates&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;deepClone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getStates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;注意在我们这个思路中，cacheFactory接收的实际是states的格式或者说类型，所以构造cache时一定是深拷贝或者其他方式转换过的。深拷贝会限制这里的数据类型，但我认为这里的数据是表单项对外暴露的数据源，本来就没什么复杂性，用深拷贝问题并不大。&lt;/p&gt;

&lt;p&gt;另一个坑来自Vue的类型声明。回到上面在example的例子中，我用了value_，而非value做key。问题来自UnwrapRef的声明。&lt;/p&gt;
&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BailTypes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;WeakMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;WeakSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ref&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UnwrapRef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ref&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;infer&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UnwrapRef2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BailTypes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;K&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;keyof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UnwrapRef2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UnwrapRef2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ref&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;infer&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UnwrapRef3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BailTypes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;K&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;keyof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UnwrapRef3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 中间是很多层UnwrapRef的定义&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UnwrapRef10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ref&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;infer&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;如果用了value字段会match&lt;code class=&quot;highlighter-rouge&quot;&gt;T extends Ref&amp;lt;infer V&amp;gt;&lt;/code&gt;，被解析成Ref中的T。所以如果用&lt;code class=&quot;highlighter-rouge&quot;&gt;{value: ''}&lt;/code&gt;，返回的cache会被解析成string。&lt;/p&gt;
&lt;h1 id=&quot;context&quot;&gt;Context&lt;/h1&gt;
&lt;p&gt;context是我们着重期望得到类型推导的部分，目的是在不同步骤的组件之间能够准确地知道上下文有什么，而不是依赖于开发时的约定。&lt;/p&gt;

&lt;h2 id=&quot;使用vuex或context对象&quot;&gt;使用Vuex或context对象&lt;/h2&gt;
&lt;p&gt;我曾经使用过两种方案：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;基于Vuex存上下文数据&lt;/li&gt;
  &lt;li&gt;在表单层面设置一个context对象存数据&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对于使用Vuex，其实是在2.0的框架下比较好的方案，能够通过一些方式进行类型标注，但是需要注意一定要在强业务弱复用的代码中使用，尽量不要和复用的公共组件耦合。&lt;/p&gt;

&lt;p&gt;context对象是上述model/context模式中实现的。在这个模式中，因为context是提供给表单项的外部环境信息，所以一定是耦合在表单项逻辑中的。这样带来的问题是，对一个表单项来说，外部环境是不定的，所以context的一个字段是否存在并不可知。这样带来了很多不确定性。&lt;/p&gt;

&lt;p&gt;当然这个劣势是建立在表单项内部环境和外部环境完全解耦的理想假设下的。如果不是基于这个思想设计，是有解决方法的。&lt;/p&gt;

&lt;h2 id=&quot;静态的context&quot;&gt;静态的context&lt;/h2&gt;
&lt;p&gt;如果我们希望context的类型能够推导，那一定要设计成静态的方法，不能把这些东西放在运行时来做。以前要实现这一点是比较困难的，因为响应式数据和Vue实例绑定。&lt;/p&gt;

&lt;p&gt;比较好的方法是用一个独立的Vue实例来做数据容器，静态函数将数据存在容器里。这实际上就是一个简化版的Vuex，Vuex底层同样是使用Vue实例实现响应式的。现在响应式系统独立让这件事变得很简单。&lt;/p&gt;

&lt;p&gt;从上面两个方案的实践中我们得到一些经验：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;在表单项中使用context会产生耦合&lt;/li&gt;
  &lt;li&gt;区分表单项内部环境和外部环境，然后通过参数接收需要的数据才是合理的封装&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;依赖上一节描述的通过外部Cache暴露表单项数据的设计，我们可以实现一个具有完整类型推导的Context。&lt;/p&gt;

&lt;h2 id=&quot;example-1&quot;&gt;example&lt;/h2&gt;
&lt;p&gt;这里直接给出一个我开发实践中的实例。你可以先看下一节的要点总结再看工程代码。&lt;/p&gt;
&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// context.ts&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getLandingContext&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 获取该表单页中的值&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;downloadType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;computed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getCheckBoxStates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formKeys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;downloadType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;platform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;computed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getCheckBoxStates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formKeys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;urlInput&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getUrlInputStates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 一些被多方依赖的属性&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isApp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;computed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;downloadType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;LandingType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DOWNLOAD_URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isIOS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;computed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Platform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;iOS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;isApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;isIOS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 表单项依赖上下问的参数&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;platformOpts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;computed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;isApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;landingFields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;platform_app&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;landingFields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;platform_link&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;convertFetchType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;computed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;external&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Platform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;iOS&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ios&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;urlInputType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;computed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;isApp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;convertDisabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;computed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;urlInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;''&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;urlInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inputing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;urlInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;convertHint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;computed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;urlInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inputing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;请先完成输入&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;urlInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;请先正确填写上方下载链接地址&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;''&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 上下文相关的计算函数&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;needAlertOnChange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;localStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;landingChangeAlert&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;webUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// globalContext.ts&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;generalContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getLandingContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// useage&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;setup&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;generalContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;points&quot;&gt;points&lt;/h3&gt;
&lt;p&gt;总结一些要点，内容可以在上面的代码中找到参考。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;context的结构和引用
    &lt;ul&gt;
      &lt;li&gt;表单页/模块的context函数&lt;/li&gt;
      &lt;li&gt;合并所有context的函数（就叫它mixedinContext吧）&lt;/li&gt;
      &lt;li&gt;组件中通过mixedinContext得到全局的context对象&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;函数中表单项值需要使用computed来维护响应式，这是3.0API开发中都需要注意的点。&lt;/li&gt;
  &lt;li&gt;表单中的计算属性基本都是依赖于上下文内容的，所以大多数都直接在context函数中定义了。这样的好处是在表单组件中不需要过度关心上下文内容，做一下逻辑封装。&lt;/li&gt;
  &lt;li&gt;context返回的内容一般是：
    &lt;ul&gt;
      &lt;li&gt;computed值，响应式的&lt;/li&gt;
      &lt;li&gt;返回一些值的函数，始终会在相关逻辑中被调用，所以丢失响应式不会影响功能&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;context函数内容实现方式是任意的，注意维护其响应式特性即可。&lt;/li&gt;
  &lt;li&gt;context是和某个表单内容强关联的，不同的表单需要定义不同的context函数，重复的context计算逻辑可以抽取出来
    &lt;blockquote&gt;
      &lt;p&gt;复用逻辑：全局context &amp;lt;- 模块context &amp;lt;- 单一context&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;状态合并&quot;&gt;状态合并&lt;/h2&gt;
&lt;p&gt;我们考虑这么一种情况：表单中的几项有非常强的关联，例如下面的业务场景。&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2020/01/13/l7IjiT.jpg&quot; alt=&quot;l7IjiT.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;转化目标列表需要根据链接地址或应用包名拉取。而应用包名也通过输入的链接地址拉取。重新输入或选择链接地址或应用包名后需要清空已选的转化目标并重新拉取。还有一些其他的表单逻辑这里不赘述，反正你知道很复杂就行了。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;如果使用上述的封装逻辑是不合适的，因为将表单项之间分割是为了有效封装而不是增加表单联动的成本。&lt;/p&gt;

&lt;p&gt;这时候也许你会想，那把图里的所有内容合并成一个组件不就好了吗？但这样做会导致组件复用性大大降低。因为这样把表单的框架和表单项的内容耦合了。&lt;strong&gt;框架&lt;/strong&gt;就是表单项的label、中间的必选的点点和布局之类的，&lt;strong&gt;内容&lt;/strong&gt;就是右边的输入框、按钮之类的。我们封装表单项组件时是实现右边的&lt;strong&gt;内容&lt;/strong&gt;部分，左边内容是什么无所谓。&lt;/p&gt;

&lt;p&gt;这里我们实现的方式也比较简单，是将这几个关联选项的状态抽取到一个大的state中，表单最终读取这个大state的数据。这样并不会对单一的表单项复用性有影响，表单项依旧可以维护自己的cache，使用watch函数在恰到时机更新外部合并的state就行。对大量复用的表单项，watch可以在表单层面实现，对不会复用的表单项可以直接关联到外部state。&lt;/p&gt;

&lt;p&gt;这样做的好处是，表单项间数据联动逻辑和外部state封装在一个文件中，通过watch等实现，甚至可以给表单暴露一些hook执行操作。表单层面不再对这些联动进行管理。这也是3.0API的一个设计目的。&lt;/p&gt;
&lt;h1 id=&quot;表单组合&quot;&gt;表单组合&lt;/h1&gt;
&lt;h2 id=&quot;配置化思考&quot;&gt;配置化思考&lt;/h2&gt;
&lt;p&gt;我们总是希望通过组件化和配置化来一劳永逸地解决动态表单的问题。但这个问题实际上需要根据业务场景和对象来区别看待。比如需要给运营同学用的拖拽表单，就应当使用json来描述表单内容，再由前端runtime对表单进行渲染。而需要前端来开发的一些业务逻辑复杂的表单就不适合这种配置思路，因为从js到json是语言表达能力的降维。&lt;/p&gt;

&lt;p&gt;这里提到一个观点，配置化在做的实际上是配置语言表达能力和业务逻辑复杂程度之间的权衡。配置语言表达能力越低，表达复杂业务逻辑的困难度和复杂性就越高。而json就是一种表达能力弱的语言，所以使用json来生成表单必定是面向业务逻辑复杂度一般的情况。&lt;/p&gt;

&lt;p&gt;那如果我们直接用js来描述配置呢？这当然是可行的并且很高效的。比如这里的按钮组，每个步骤的按钮组是不一样的，点击回调也不一样，其排列、样式、回调等等特性就是通过通过一个object来描述的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2020/01/13/l7XFPI.jpg&quot; alt=&quot;l7XFPI.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;更进一步，既然用Vue在构建项目，用Vue的语法来描述配置当然也是可以的。这就是在核心思路一节中我提到的，如果组件封装程度足够高，那Vue组件本身就是一种对表单的配置描述。这也就是为什么将大量计算属性集中到context函数中，为什么将表单联动逻辑抽取出来。这样的设计让表单组件本身包含的逻辑极少，只是将组件和逻辑关联起来。&lt;/p&gt;

&lt;h2 id=&quot;我们根据以下要点进行表单组合&quot;&gt;我们根据以下要点进行表单组合&lt;/h2&gt;
&lt;h3 id=&quot;表单项组件嵌套在表单框架组件中&quot;&gt;表单项组件嵌套在表单框架组件中&lt;/h3&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;moduleItem&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;下载方式&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;FormCheckBox&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;:form-key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;formKeys.downloadType&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;:fields=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;formFields.downloadType&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;:disabled=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;reviewing&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;:filter=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;changeFilter&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;:onChange=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;downloadTypeChange&quot;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/moduleItem&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;表单框架的定义在上一节中提过。&lt;/p&gt;
&lt;h3 id=&quot;通过context控制表单项行为&quot;&gt;通过Context控制表单项行为&lt;/h3&gt;
&lt;p&gt;如是否显示、数据源、显示内容等&lt;/p&gt;

&lt;p&gt;如果表单项之间存在多级if嵌套逻辑，我们统一打平到一层判断，反正都是一个computed值。&lt;/p&gt;
&lt;h3 id=&quot;为每个表单模块定义init和getdata方法&quot;&gt;为每个表单模块定义&lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;getData&lt;/code&gt;方法&lt;/h3&gt;
&lt;p&gt;表单模块有自己初始化数据的逻辑和根据context输出数据的方法，这些方法是这个表单模块独有的，不会复用。表单提交的内容将从&lt;code class=&quot;highlighter-rouge&quot;&gt;getData&lt;/code&gt;方法中取得。&lt;/p&gt;

&lt;p&gt;至于ajax请求逻辑放在那里，和表单是本身没什么关系，能拿到数据就行了，随便在哪里都可以。&lt;/p&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;以上内容描述了我们在表单开发中Vue Composition API的工程实践，写这篇文章是因为的3.0API的加持下，表单场景我们可以用更灵活的方式实现组件化和功能封装。&lt;/p&gt;

&lt;p&gt;表单的业务场景是变化多端的，这篇文章也只是提供了一种思考角度，其中一些设计可能存在缺陷。我们期望实现的无非几点：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;更好的组件化和复用&lt;/li&gt;
  &lt;li&gt;更好的逻辑分割&lt;/li&gt;
  &lt;li&gt;更好的类型推导&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;希望本文能够为你理解Vue3.0API提供灵感。&lt;/p&gt;
</description>
        <pubDate>Wed, 15 Jan 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/01/15/%E8%A1%A8%E5%8D%95%E7%BB%84%E4%BB%B6%E5%8C%96%E5%AE%9E%E8%B7%B5/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/01/15/%E8%A1%A8%E5%8D%95%E7%BB%84%E4%BB%B6%E5%8C%96%E5%AE%9E%E8%B7%B5/</guid>
        
        <category>Vue</category>
        
        <category>TypeScript</category>
        
        <category>Vue Composition API</category>
        
        <category>表单</category>
        
        
      </item>
    
      <item>
        <title>Hello world, this is AIOFE!</title>
        <description>&lt;h2 id=&quot;hello-world-this-is-aiofe&quot;&gt;Hello world, this is AIOFE!&lt;/h2&gt;

&lt;p&gt;在过去的2019年，随着我司广告优化团队的业务逐渐发展，团队迎来了很多新的同学，欢迎各位新同学的到来！&lt;/p&gt;

&lt;p&gt;有趣的是团队的成员大多并不是软件、计算机科班出生，有和我一样从嵌入式开发转过来的，也有从自动化转过来的，还有从事化工事业半年后转过来的。相逢聚散皆是缘分，希望之后能在这个小站里留下大家学习、工作的痕迹。我们团队的名称叫做AIOFE（Ad Intelligent Optimization’s FrontEnd），主要承接头条广告优化组的前端各项事宜。&lt;/p&gt;

&lt;p&gt;逝者如斯夫，不舍昼夜。在我短短数年的职业生涯，前端的技术栈已经发生了很大的变化，jQuery、nodeJS、React、webpack…似乎这个行业每天都在诞生新的技术和框架，但我相信技术的本质都是相通的，在这里祝大家畅所欲言，交流不是简单的对错，而是理解各方的折衷，从而找到最适合自己的方向。&lt;/p&gt;

&lt;p&gt;新的一年即将到来，日益壮大的团队正在摩拳擦掌，跃跃欲试，相信大家在新的一年，一定能一起成就一番大事业！～&lt;/p&gt;
</description>
        <pubDate>Wed, 02 Jan 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/01/02/Hello-world-this-is-AIOFE/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/01/02/Hello-world-this-is-AIOFE/</guid>
        
        <category>AIOFE</category>
        
        
      </item>
    
  </channel>
</rss>
